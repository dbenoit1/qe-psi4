spec:
  templates:

  # Run a Psi4 calculation
  - name: run-psi4
    parent: generic-task
    inputs:
      parameters:
      - name: docker-image
        default: zmachine_psi4
      - name: basis
      - name: method #e.g. fci or scf 
      - name: reference
      - name: freeze-core
        default: 'False'
      - name: charge
        default: 0
      - name: multiplicity
        default: 1
      - name: save-hamiltonian
        default: 'False'
      - name: n-active-extract
        default: None
      - name: freeze-core-extract
        default: 'False'
      - name: nthreads
        default: 1
      - name: n-active
        default: None
      - name: options
        default: None
      - name: command
        value: bash main_script.sh
      artifacts:
      - name: geometry
        path: /app/geometry.json
      - name: wavefunction
        path: /app/wavefunction.npy
        optional: True
      - name: main-script
        path: /app/main_script.sh
        raw:
          data: |
            mkdir /app/scr
            export PSI_SCRATCH=/app/scr
            python3 python_script.py
      - name: python-script
        path: /app/python_script.py
        raw:
          data: |
            import os, json
            from qepsi4 import run_psi4
            from qeopenfermion import save_interaction_operator
            from zquantum.core import SCHEMA_VERSION

            with open('geometry.json') as f:
              geometry = json.load(f)

            results, hamiltonian = run_psi4(geometry,
                     basis='{{inputs.parameters.basis}}',
                     multiplicity={{inputs.parameters.multiplicity}},
                     charge={{inputs.parameters.charge}},
                     method='{{inputs.parameters.method}}',
                     reference='{{inputs.parameters.reference}}',
                     freeze_core={{inputs.parameters.freeze-core}},
                     n_active={{inputs.parameters.n-active}},
                     save_hamiltonian={{inputs.parameters.save-hamiltonian}},
                     options={{inputs.parameters.options}},
                     n_active_extract={{inputs.parameters.n-active-extract}},
                     freeze_core_extract={{inputs.parameters.freeze-core-extract}})
            
            results['schema'] = SCHEMA_VERSION + '-energy_calc'
            with open('energycalc-results.json', 'w') as f:
              f.write(json.dumps(results, indent=2))
            
            if {{inputs.parameters.save-hamiltonian}}:
              save_interaction_operator(hamiltonian, 'hamiltonian.json')
            
            with open('n_alpha.txt', 'w') as f:
              f.write(str(results['n_alpha']))

            with open('n_beta.txt', 'w') as f:
              f.write(str(results['n_beta']))

            with open('n_mo.txt', 'w') as f:
              f.write(str(results['n_mo']))

            with open('n_frozen_core.txt', 'w') as f:
              f.write(str(results['n_frozen_core']))

    outputs:
      artifacts:
      - name: energycalc-results
        path: /app/energycalc-results.json
      - name: hamiltonian
        path: /app/hamiltonian.json
        optional: True
      parameters:
      - name: n-alpha
        valueFrom:
          path: /app/n_alpha.txt
      - name: n-beta
        valueFrom:
          path: /app/n_beta.txt
      - name: n-mo
        valueFrom:
          path: /app/n_mo.txt
      - name: n-frozen-core
        valueFrom:
          path: /app/n_frozen_core.txt
